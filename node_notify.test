<?php

class NodeNotifyTestCase extends DrupalWebTestCase {

  protected $type = NULL;
  protected $node = NULL;

  protected $unprivileged = NULL;
  protected $privileged = NULL;
  protected $admin = NULL;

  public static function getInfo () {
    return array(
      'name' => t('Node Notify tests'),
      'description' => t('Test Node Notify behaviour and integration with Comment Notify.'),
      'group' => t('Node Notify'),
    );
  }

  protected function setUp () {
    parent::setUp('node_notify', 'comment_notify');

    $this->type = $this->createContentType();

    $type = $this->type->type;
    $permissions = array(
      'access content', "create $type content", "edit own $type content", "delete own $type content",
    );

    $this->unprivileged = $this->drupalCreateUser($permissions);

    $permissions += array(100 => 'subscribe to node', 'post comments', 'skip comment approval', 'subscribe to comments');
    $this->privileged = $this->drupalCreateUser($permissions);

    $permissions += array(200 => 'administer node notify', 'administer node subscriptions', "edit any $type content", "delete any $type content");
    $this->admin = $this->drupalCreateUser($permissions);

    $this->node = $this->drupalCreateNode(array(
      'type' => $this->type->type, 'comment' => COMMENT_NODE_OPEN,
      'uid' => $this->privileged->uid,
    ));
  }

  protected function tearDown () {
    parent::tearDown();
  }

  protected function testNodeNotifyEnabledTypes () {
    $this->drupalLogin($this->privileged);

    $this->disableContentTypes();
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertNoPattern('/edit-node-notify-subscribe/', 'Node Notify disabled for content type.');

    $this->enableContentType($this->type);
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertPattern('/edit-node-notify-subscribe/', 'Node Notify enabled for content type.');

    $this->drupalLogout();
  }

  protected function testNodeNotifyAnonymous () {
    $type = $this->type->type;
    $nid = $this->node->nid;
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("create $type content"));

    $this->drupalLogout();
    $this->enableContentType($this->type);

    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertNoPattern('/edit-node-notify-subscribe/', 'Node Notify disabled for anonymous user.');


    $this->drupalGet('node/' . $nid);
    $this->assertNoPattern("/node\/$nid\/subscribe/", 'No Subscribe link for anonymous user.');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertPattern('/edit-node-notify-subscribe/', 'Node Notify enabled for anonymous user.');

    $this->drupalGet('node/' . $nid);
    $this->assertPattern("/node\/$nid\/subscribe/", 'Subscribe link is displayed for anonymous user.');

    user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array(
      'subscribe to node', "create $type content",
    ));
  }

  protected function testNodeNotifySubscribeLink () {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $this->enableContentType($this->type);

    $this->drupalLogout();

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(403, 'Forbidden');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalLogin($this->admin);
    $this->drupalLogout();

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible');
    $this->assertPattern('/node-notify-subscribe-form/', 'Subscription form is displayed for anonymous user.');
    // TODO: Fill the form and check subscription

    $this->drupalGet("node/$nid/unsubscribe");
    $this->assertUrl("node/$nid", array(), 'Anonymous user should be redirected back to node page.');
    $this->assertNoPattern('/Unsubscribed from/', 'Anonymous user should not see "Unsubscribe" message.');

    user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalLogin($this->unprivileged);

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(403, 'Forbidden for unprivileged user.');

    $this->drupalLogout();


    $this->drupalLogin($this->privileged);

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible to privileged user.');

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible');
    $this->assertNoPattern('/node-notify-subscribe-form/', 'Subscription form is not displayed for privileged user.');
    $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
    $this->assertTrue(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is subscribed.');

    $this->drupalGet("node/$nid/unsubscribe");
    $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
    $this->assertPattern('/Unsubscribed from/', 'Privileged user should see "Unsubscribe" message.');
    $this->assertFalse(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is unsubscribed.');

    $this->drupalLogout();
  }

  protected function testNodeNotifyNodeFormFieldType () {
    $type = $this->type->type;
    $nid = $this->node->nid;

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("create $type content", 'subscribe to node'));
    $this->enableContentType($this->type);

    $this->drupalLogin($this->privileged);
    $this->drupalGet('node/add/'.$this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", NULL,
      'Checkbox for registerd user.'
    );

    $this->drupalLogout();
    $this->drupalGet('node/add/'.$this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='text' and @id='edit-node-notify-subscribe']", NULL,
      'Text field for anonymous user.'
    );
  }

  protected function testNodeNotifyNodeFormFieldValue () {
    $type = $this->type->type;
    $nid = $this->node->nid;

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("edit any $type content", 'subscribe to node'));
    $this->enableContentType($this->type);

    $this->drupalLogin($this->privileged);
    node_notify_subscribe($nid, $this->privileged->uid);
    $this->drupalGet("node/$nid/edit");
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", '1',
      'Checkbox checked for author.'
    );
    $this->assertText(
      t('Receive comment notifications by email'),
      'Different label if editing is done by the author.'
    );
    $this->drupalLogout();

    $this->drupalLogin($this->admin);
    $this->drupalGet("node/$nid/edit");
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", '1',
      'Checkbox checked for admin.'
    );
    $this->assertText(
      t('Author receives comment notifications by email'),
      'Different label if editing is done not by the author.'
    );

    $this->drupalLogout();
    $this->drupalGet("node/$nid/edit");
    $this->assertNoFieldById('edit-node-notify-subscribe', NULL,
      'No field displayed for anonymous user when editing existing node.'
    );

    $tmpUser = $this->drupalCreateUser(array("edit any $type content"));

    $this->drupalLogin($tmpUser);
    $this->drupalGet("node/$nid/edit");
    $this->assertNoFieldById('edit-node-notify-subscribe', NULL,
      'No field displayed for user with no "administer node subscription" permission when editing existing node.'
    );
  }

  protected function testNodeNotifyNotifications () {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $this->enableContentType($this->type);
    $email = $this->getRandomEmail();

    // this skips permission checking
    node_notify_subscribe($nid, 0, $email);
    node_notify_subscribe($nid, $this->privileged->uid);

    $this->drupalLogin($this->privileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName());

    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_DENIED, 'Notification marked as denied.');

    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, 'Notification skipped -- subscriber is commenter.');

    variable_set('comment_anonymous_' . $type, '1');
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('post comments', 'skip comment approval'));
    $this->drupalLogout();
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName(), array('mail' => $email, 'name' => $this->randomName()));
    $notification = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($notification->notified == NODE_NOTIFY_SKIPPED, 'Notification skipped -- subscribe is commenter (anonymous).');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node', 'access content'));
    $this->drupalLogin($this->privileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName());
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, 'Notification marked as sent.');
    $this->assertMail('to', $email, "Notification mail sent to anonymous subscriber.");
  }

  protected function testNodeNotifyCommentNotifyIntegrationWeb () {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $this->enableContentType($this->type);
    $email = $this->getRandomEmail();

    variable_set('comment_notify_node_types', array($type => $type));
    variable_set('comment_anonymous_' . $type, '1');

    $perms = array('subscribe to node', 'post comments', 'skip comment approval', 'subscribe to comments');
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);

    comment_notify_set_user_notification_setting($this->admin->uid, 1);
    $this->node->uid = $this->admin->uid;
    node_save($this->node);

    node_notify_subscribe($nid, 0, $email);
    node_notify_subscribe($nid, $this->privileged->uid);

    $this->drupalLogin($this->unprivileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName(), array('notify_type' => 1, 'notify' => TRUE));
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#1 Notification to anonymous sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#1 Notification to user sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertFalse((boolean)$note, '#1 User is not subscribed 1.');
    $note = node_notify_get_notification($data['id'], $nid, $this->admin->uid);
    $this->assertFalse((boolean)$note, '#1 User is not subscribed 2.');
    $this->drupalLogout();

    node_notify_subscribe($nid, $this->unprivileged->uid);

    $this->drupalLogin($this->privileged);
    $cid = $data['id'];
    $this->drupalGet("comment/reply/$nid/$cid");
    $data = $this->postComment(NULL, $this->randomName(), $this->randomName(), array('notify_type' => 2, 'notify' => TRUE));
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#2 Notification handled by Comment Notify.');
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#2 Notification sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, '#2 Notification skipped -- commenter is subscriber.');
    $this->drupalLogout();

    node_notify_subscribe($nid, $this->admin->uid);

    // anonymous
    $cid = $data['id'];
    $this->drupalGet("comment/reply/$nid/$cid");
    $data = $this->postComment(NULL, $this->randomName(), $this->randomName(), array('name' => $this->randomName(), 'mail' => $email));
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 1.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 2.');
    if ($note->notified != NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY) {
      $c1 = db_query('SELECT * FROM {comment} WHERE cid = :cid', array(':cid' => $cid))->fetchObject();
      $c2 = db_query('SELECT * FROM {comment} WHERE cid = :cid', array(':cid' => $data['id']))->fetchObject();
      $cn = db_query('SELECT * FROM {comment_notify} WHERE cid = :cid', array(':cid' => $data['id']))->fetchObject();
      drush_log(print_r($c1, 1), 'error');
      drush_log(print_r($c2, 1), 'error');
      drush_log(print_r($cn, 1), 'error');
    }
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, '#3 Notification skipped -- commenter is subscriber.');
    $note = node_notify_get_notification($data['id'], $nid, $this->admin->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 3.');
  }

  protected function getRandomEmail () {
    return $this->randomName() . '@example.com';
  }

  protected function createContentType () {
    $settings = array(
      'type' => 'node_notify_type',
      'title_label' => 'Title',
      'body_label' => 'Body',
    );
    $content_type = $this->drupalCreateContentType($settings);
    return $content_type;
  }

  protected function enableContentType ($type) {
    variable_set('node_notify_enabled_types', array(
      $type->type => $type->type,
    ));
  }

  protected function disableContentTypes () {
    variable_set('node_notify_enabled_types', array());
  }

  function postComment($node, $subject, $comment, $notify = NULL, $contact = NULL) {
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['subject'] = $subject;
    $edit['comment_body[' . $langcode . '][0][value]'] = $comment;

    if ($notify !== NULL && is_array($notify)) {
      $edit += $notify;
    }

    if ($contact !== NULL && is_array($contact)) {
      $edit += $contact;
    }

    $url = $node ? 'node/' . $node->nid : NULL;
    $this->drupalPost($url, $edit, t('Save'));

    $match = array();
    // Get comment ID
     preg_match('/#comment-([^"]+)/', $this->getURL(), $match);

    // Get comment.
    if (!empty($match[1])) { // If true then attempting to find error message.
      if ($subject) {
        $this->assertText($subject, 'Comment subject posted.');
      }
      $this->assertText($comment, 'Comment body posted.');
      $this->assertTrue((!empty($match) && !empty($match[1])), t('Comment id found.'));
    }

    if (isset($match[1])) {
      return array('id' => $match[1], 'subject' => $subject, 'comment' => $comment);
    }
  }

}